<?php //%255BApp%255CEntity%255CMemberTask%255D%255B1%255D

return [PHP_INT_MAX, static function () { return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\Entity'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\Entity')),
        clone ($p['ApiPlatform\\Core\\Annotation\\ApiResource'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('ApiPlatform\\Core\\Annotation\\ApiResource')),
        clone ($p['ApiPlatform\\Core\\Annotation\\ApiFilter'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('ApiPlatform\\Core\\Annotation\\ApiFilter')),
        clone $p['ApiPlatform\\Core\\Annotation\\ApiFilter'],
        clone $p['ApiPlatform\\Core\\Annotation\\ApiFilter'],
    ],
    null,
    [
        'stdClass' => [
            'collectionOperations' => [
                1 => [
                    'get' => [
                        'access_control' => 'is_granted(\'ROLE_MEMBER_TASK_LIST\')',
                    ],
                    'post' => [
                        'access_control' => 'is_granted(\'ROLE_MEMBER_TASK_CREATE\')',
                    ],
                    'addTask' => [
                        'access_control' => 'is_granted(\'ROLE_MEMBER\')',
                        'method' => 'POST',
                        'path' => '/frontend/member/profile/task/add',
                        'denormalization_context' => [
                            'groups' => [
                                'member_get_item',
                            ],
                        ],
                        'controller' => 'App\\Controller\\Member\\MemberAddTaskAction',
                        'defaults' => [
                            '_api_receive' => true,
                        ],
                    ],
                    'addPartnerToMemberTask' => [
                        'access_control' => 'is_granted(\'ROLE_PARTNER\')',
                        'method' => 'POST',
                        'path' => '/frontend/partner/profile/task/add',
                        'denormalization_context' => [
                            'groups' => [
                                'member_get_item',
                            ],
                        ],
                        'controller' => 'App\\Controller\\Partner\\PartnerAddMemberTaskAction',
                        'defaults' => [
                            '_api_receive' => true,
                        ],
                    ],
                ],
            ],
            'itemOperations' => [
                1 => [
                    'get' => [
                        'access_control' => 'is_granted(\'ROLE_MEMBER_TASK_SHOW\')',
                    ],
                    'put' => [
                        'access_control' => 'is_granted(\'ROLE_MEMBER_TASK_UPDATE\')',
                    ],
                    'delete' => [
                        'access_control' => 'is_granted(\'ROLE_MEMBER_TASK_DELETE\')',
                    ],
                    'memberPutTask' => [
                        'access_control' => 'is_granted(\'ROLE_MEMBER\')',
                        'method' => 'PUT',
                        'path' => '/frontend/member/profile/task/update',
                        'normalization_context' => [
                            'groups' => [
                                'member_put_task',
                            ],
                        ],
                        'controller' => 'App\\Controller\\Member\\MemberPutTaskAction',
                        'defaults' => [
                            '_api_receive' => false,
                        ],
                    ],
                ],
            ],
            'attributes' => [
                1 => [
                    'normalization_context' => [
                        'groups' => [
                            'member_task_read',
                            'read',
                            'is_active_read',
                        ],
                    ],
                    'denormalization_context' => [
                        'groups' => [
                            'member_task_write',
                            'is_active_write',
                        ],
                    ],
                    'order' => [
                        'order' => 'ASC',
                    ],
                ],
            ],
            'filterClass' => [
                2 => 'ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\DateFilter',
                'ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\SearchFilter',
                'ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\OrderFilter',
            ],
            'properties' => [
                2 => [
                    'createdAt',
                    'updatedAt',
                ],
                [
                    'id' => 'exact',
                    'member.name' => 'ipartial',
                    'name' => 'ipartial',
                ],
                [
                    'id',
                    'member.name',
                    'name',
                    'createdAt',
                    'updatedAt',
                ],
            ],
        ],
    ],
    [
        $o[0],
        $o[1],
        $o[2],
        $o[3],
        $o[4],
    ],
    []
); }];
